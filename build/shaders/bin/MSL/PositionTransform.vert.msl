#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UBO
{
    float4x4 proj_view;
    float4x4 model;
};

struct Input
{
    float3 Position;
    float3 Normal;
};

struct Output
{
    float4 Position;
    float3 Normal;
    float4 WorldPos;
};

struct main0_out
{
    float3 out_var_NORMAL [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 in_var_SV_Position [[attribute(0)]];
    float3 in_var_NORMAL [[attribute(1)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant type_UBO& UBO [[buffer(0)]])
{
    main0_out out = {};
    float3 _36 = in.in_var_SV_Position;
    float3 _35 = in.in_var_NORMAL;
    float4 _54 = float4(in.in_var_SV_Position, 1.0);
    float4 _55 = (UBO.proj_view * UBO.model) * _54;
    float4 _42 = _55;
    float3 _64 = fast::normalize(in.in_var_NORMAL * float3x3(float4(UBO.model[0][0], UBO.model[1][0], UBO.model[2][0], UBO.model[3][0]).xyz, float4(UBO.model[0][1], UBO.model[1][1], UBO.model[2][1], UBO.model[3][1]).xyz, float4(UBO.model[0][2], UBO.model[1][2], UBO.model[2][2], UBO.model[3][2]).xyz));
    float3 _41 = _64;
    float4 _65 = UBO.model * _54;
    float4 _40 = _65;
    float4 _39 = _55;
    float3 _38 = _64;
    float4 _37 = _65;
    out.gl_Position = _55;
    out.out_var_NORMAL = _64;
    out.out_var_TEXCOORD1 = _65;
    return out;
}

